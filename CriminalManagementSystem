from tkinter import *
from PIL import Image, ImageTk
from tkinter import ttk
import mysql.connector
from tkinter import messagebox
from datetime import datetime
import mysql.connector
from tkinter import Tk


def start_criminal_system():
    root = Tk()
    obj = Criminal(root)
    root.mainloop()



class Criminal:
    def __init__(self, root):
        self.root = root
        self.root.geometry('1530x790+0+0')
        self.root.title('CRIMINAL MANAGEMENT SYSTEM')
        self.gender_var = StringVar()
        self.wanted_var = StringVar()
        self.make_case_id_auto_increment()



        #VARIABLES####################################################################################################

        self.var_case_id = StringVar()
        self.var_criminal_no = StringVar()
        self.var_name = StringVar()
        self.var_nickname = StringVar()
        self.var_arrest_date = StringVar()
        self.var_date_of_crime = StringVar()
        self.var_address = StringVar()
        self.var_age = StringVar()
        self.var_occupation = StringVar()
        self.var_birthMark = StringVar()
        self.var_crime_type = StringVar()
        self.var_father_name = StringVar()
        self.var_gender = StringVar()
        self.var_wanted = StringVar()



        lbl_title = Label(self.root, text='CRIMINAL MANAGEMENT SYSTEM', font=('time new roman', 40, 'bold'), bg='black',
                          fg='gold')
        lbl_title.place(x=0, y=0, width=1530, height=70)

        img_logo = Image.open(r"C:\Users\klenol\Pictures\Screenshots\bbbbb.jpg")
        img_logo = img_logo.resize((60, 60), Image.LANCZOS)
        self.photo_logo = ImageTk.PhotoImage(img_logo)

        self.logo = Label(self.root, image=self.photo_logo)
        self.logo.place(x=100, y=5, width=60, height=60)

        # Img_Frame############################################################
        img_frame = Frame(self.root, bd=2, relief=RIDGE, bg='White')
        img_frame.place(x=0, y=70, width=1530, height=130)

        img1 = Image.open(r'C:\Users\klenol\Pictures\Screenshots\police logo.jpg')
        img1 = img1.resize((540, 160), Image.LANCZOS)
        self.photo1 = ImageTk.PhotoImage(img1)

        self.img_1 = Label(img_frame, image=self.photo1)
        self.img_1.place(x=0, y=0, width=540, height=160)

        # img2############################################################
        img2 = Image.open(r'C:\Users\klenol\Pictures\Screenshots\cardo.jpg')
        img2 = img2.resize((540, 160), Image.LANCZOS)
        self.photo2 = ImageTk.PhotoImage(img2)

        self.img_2 = Label(img_frame, image=self.photo2)
        self.img_2.place(x=540, y=0, width=540, height=160)

        # img3############################################################
        img3 = Image.open(r'C:\Users\klenol\Pictures\Screenshots\police logo.jpg')
        img3 = img3.resize((540, 160), Image.LANCZOS)
        self.photo3 = ImageTk.PhotoImage(img3)

        self.img_3 = Label(img_frame, image=self.photo3)
        self.img_3.place(x=1080, y=0, width=540, height=160)

        # Main Frame############################################################
        Main_frame = Frame(self.root, bd=2, relief=RIDGE)
        Main_frame.place(x=10, y=200, width=1500, height=560)


        # Upper Frame############################################################
        upper_frame = LabelFrame(Main_frame, bd=2, relief=RIDGE, bg='white', text='Criminal Information',
                                 font=('time new roman', 11, 'bold'), fg='red')
        upper_frame.place(x=10, y=10, width=1480, height=270)


        #Labels Entry########################################################################################################

        #Case ID############################################################
        caseid = Label(upper_frame, text="Case ID: ", bg='white', font=('arial', 11, 'bold'))
        caseid.grid(row=0, column=0, padx=2, sticky=W)


        #Criminal NO ############################################################
        lbl_criminal_no=Label(upper_frame, font=("arial",12,"bold"), text="Criminal NO: ", bg='white')
        lbl_criminal_no.grid(row=0, column=2,sticky=W,padx=2,pady=7)

        txt_criminal_no=ttk.Entry(upper_frame, textvariable=self.var_criminal_no,width=22,font=("arial",11,"bold"))
        txt_criminal_no.grid(row=0, column=3,padx=2,pady=7)


        #Criminal Name ############################################################
        lbl_Name=Label(upper_frame,  font=("arial",12,"bold"), text="Criminal Name: ",bg="white")
        lbl_Name.grid(row=1,column=0,sticky=W,padx=2,pady=7)

        txt_Name=ttk.Entry(upper_frame, textvariable= self.var_name, width=22,font=("arial,",11,"bold"))
        txt_Name.grid(row=1,column=1,sticky=W,padx=2,pady=7)


        #NickName#############################################################################
        lbl_nickname=Label(upper_frame, font=("arial",12,"bold"),text="Nick Name: ", bg="white")
        lbl_nickname.grid(row=1,column=2,sticky=W,padx=2,pady=7)

        txt_nickname=ttk.Entry(upper_frame, textvariable=self.var_nickname,width=22,font=("arial",11,"bold"))
        txt_nickname.grid(row=1, column=3,padx=2,pady=7)



        #Arrest Date ####################################################################################
        lbl_arrestDate = Label(upper_frame, font=("arial", 12, "bold"), text="Arrest Date: ", bg="white")
        lbl_arrestDate.grid(row=2, column=0, sticky=W, padx=2, pady=7)

        txt_arrestDate = ttk.Entry(upper_frame, textvariable= self.var_arrest_date, width=22, font=("arial", 11, "bold"))
        txt_arrestDate.grid(row=2, column=1, padx=2, pady=7)



        #Date of Crime ############################################################################################
        lbl_dateOfCrime = Label(upper_frame, font=("arial", 12, "bold"), text="Date of Crime: ", bg="white")
        lbl_dateOfCrime.grid(row=2, column=2, sticky=W, padx=2, pady=7)

        txt_dateOfCrime = ttk.Entry(upper_frame,  textvariable=self.var_date_of_crime, width=22, font=("arial", 11, "bold"))
        txt_dateOfCrime.grid(row=2, column=3, padx=2, pady=7)



        #Address #######################################################################################################
        lbl_address = Label(upper_frame, font=("arial", 12, "bold"), text="Address: ", bg="white")
        lbl_address.grid(row=3, column=0, sticky=W, padx=2, pady=7)

        txt_address = ttk.Entry(upper_frame, textvariable= self.var_address, width=22, font=("arial", 11, "bold"))
        txt_address.grid(row=3, column=1, padx=2, pady=7)



        #AGE ###########################################################################################################
        lbl_age = Label(upper_frame, font=("arial", 12, "bold"), text="Age: ", bg="white")
        lbl_age.grid(row=3, column=2, sticky=W, padx=2, pady=7)

        txt_age = ttk.Entry(upper_frame, textvariable= self.var_age, width=22, font=("arial", 11, "bold"))
        txt_age.grid(row=3, column=3, padx=2, pady=7)




        #OCCUPATION ####################################################################################################
        lbl_occupation = Label(upper_frame, font=("arial", 12, "bold"), text="Occupation: ", bg="white")
        lbl_occupation.grid(row=4, column=0, sticky=W, padx=2, pady=7)

        txt_occupation = ttk.Entry(upper_frame, textvariable=self.var_occupation, width=22, font=("arial", 11, "bold"))
        txt_occupation.grid(row=4, column=1, padx=2, pady=7)




        #BirthMark #####################################################################################################
        lbl_birthMark = Label(upper_frame, font=("arial", 12, "bold"), text="Birth Mark: ", bg="white")
        lbl_birthMark.grid(row=4, column=2, sticky=W, padx=2, pady=7)

        txt_birthMark = ttk.Entry(upper_frame, textvariable= self.var_birthMark, width=22, font=("arial", 11, "bold"))
        txt_birthMark.grid(row=4, column=3, padx=2, pady=7)



        # Crime Type ###################################################################################################
        lbl_crimeType = Label(upper_frame, font=("arial", 12, "bold"), text="Crime Type: ", bg="white")
        lbl_crimeType.grid(row=0, column=4, sticky=W, padx=2, pady=7)

        txt_crimeType = ttk.Entry(upper_frame, textvariable=self.var_crime_type, width=22, font=("arial", 11, "bold"))
        txt_crimeType.grid(row=0, column=5, padx=2, pady=7)




        # Father Name ##################################################################################################
        lbl_fatherName = Label(upper_frame, font=("arial", 12, "bold"), text="Father Name: ", bg="white")
        lbl_fatherName.grid(row=1, column=4, sticky=W, padx=2, pady=7)

        txt_fatherName = ttk.Entry(upper_frame, textvariable=self.var_father_name, width=22, font=("arial", 11, "bold"))
        txt_fatherName.grid(row=1, column=5, padx=2, pady=7)




        #Gender ########################################################################################################
        lbl_gender=Label(upper_frame, font=("arial",12,"bold"), text="Gender: ", bg="white")
        lbl_gender.grid(row=2,column=4,sticky=W,padx=2,pady=7)




        # Wanted #######################################################################################################
        lbl_wanted = Label(upper_frame, font=("arial", 12, "bold"), text="Most Wanted: ", bg="white")
        lbl_wanted.grid(row=3, column=4, sticky=W, padx=2, pady=7)

        # Radio Button gender ##########################################################################################
        radio_frame_gender = Frame(upper_frame, bd=2, relief=RIDGE, bg="white")
        radio_frame_gender.place(x=740, y=90, width=190, height=30)

        self.gender_var = StringVar()  # Variable to track the selected gender

        male = Radiobutton(radio_frame_gender, text="Male", value="Male", variable=self.gender_var,
                           font=("arial", 9, "bold"), bg="white")
        male.grid(row=0, column=0, pady=2, padx=5, sticky=W)

        female = Radiobutton(radio_frame_gender, text="Female", value="Female", variable=self.gender_var,
                             font=("arial", 9, "bold"), bg="white")
        female.grid(row=0, column=1, pady=2, padx=5, sticky=W)

        # Radio Button Most Wanted#######################################################################################
        radio_frame_wanted = Frame(upper_frame, bd=2, relief=RIDGE, bg="white")
        radio_frame_wanted.place(x=740, y=130, width=190, height=30)

        self.wanted_var = StringVar()  # Variable to track the selected Most Wanted option

        yes = Radiobutton(radio_frame_wanted, text="Yes", value="Yes", variable=self.wanted_var,
                          font=("arial", 9, "bold"),
                          bg="white")
        yes.grid(row=1, column=0, pady=2, padx=5, sticky=W)

        no = Radiobutton(radio_frame_wanted, text="No", value="No", variable=self.wanted_var, font=("arial", 9, "bold"),
                         bg="white")
        no.grid(row=1, column=1, pady=2, padx=5, sticky=W)

        #Buttons #######################################################################################################
        button_frame= Frame(upper_frame, bd=2, relief=RIDGE, bg="white")
        button_frame.place(x=5, y=200, width=785, height=45)

        # Add Button ####################################################################################################

        btn_add=Button(button_frame, command=self.add_data, text="Record Save", font=("arial",13,"bold"),width=14,bg="blue",fg="white")
        btn_add.grid(row=0,column=0,padx=3,pady=5)

        # update Button ####################################################################################################

        btn_update = Button(button_frame, command=self.update_data, text="Update", font=("arial", 13, "bold"), width=14, bg="blue", fg="white")
        btn_update.grid(row=0, column=1, padx=3, pady=5)

        # Delete Button ####################################################################################################

        btn_Delete = Button(button_frame, command=self.delete_data, text="Delete", font=("arial", 13, "bold"), width=14, bg="blue", fg="white")
        btn_Delete.grid(row=0, column=2, padx=3, pady=5)

        # clear Button ####################################################################################################

        btn_clear = Button(button_frame, command=self.clear_data, text="Clear", font=("arial", 13, "bold"), width=14, bg="blue", fg="white")
        btn_clear.grid(row=0, column=3, padx=3, pady=5)

        # Sorting Button ################################################################################################
        btn_sort = Button(button_frame, command=self.sort_data, text="Sort", font=("arial", 13, "bold"), width=14,
                          bg="blue", fg="white")
        btn_sort.grid(row=0, column=4, padx=3, pady=5)






        #background right side image ###################################################################################
        img_crime = Image.open(r'C:\Users\klenol\Pictures\Screenshots\chief-justice-of-the-supreme-court-of-the-philippines-22c3e858-b4db-4f50-8795-49bac2259c0-resize-750.webp')
        img_crime = img_crime.resize((470, 245), Image.LANCZOS)
        self.photocrime = ImageTk.PhotoImage(img_crime)

        self.img_crime = Label(upper_frame, image=self.photocrime)
        self.img_crime.place(x=1000, y=0, width=470, height=245)





        #Down Frame#####################################################################################################
        down_frame = LabelFrame(Main_frame, bd=2, relief=RIDGE, bg='white', text='Criminal Information Table',
                                font=('time new roman', 11, 'bold'), fg='red')
        down_frame.place(x=10, y=280, width=1480, height=270)

        # Search Frame ###################################################################################################
        search_frame = LabelFrame(down_frame, bd=2, relief=RIDGE, bg='white', text='Search Criminal Record ',
                                  font=('time new roman', 11, 'bold'), fg='red')
        search_frame.place(x=0, y=0, width=1470, height=60)

        search_by = Label(search_frame, font=("arial", 11, "bold"), text="Search By: ", bg="red", fg="white")
        search_by.grid(row=0, column=0, sticky=W, padx=5)

        # Add all data variables to the values list
        self.var_com_search = StringVar()
        combo_search_box = ttk.Combobox(search_frame, textvariable=self.var_com_search, font=("arial", 11, "bold"),
                                        width=18,
                                        state='readonly')
        # Add all the data variables to the values list
        combo_search_box['values'] = (
            'Select Option', 'Case_id', 'Criminal_no', 'Criminal_name', 'Nick_name', 'arrest_date', 'dateOfcrime',
            'address', 'age', 'occupation', 'BirthMark', 'crimeType', 'fatherName', 'gender', 'wanted')
        combo_search_box.set('')
        combo_search_box.grid(row=0, column=1, sticky=W, padx=5)

        self.var_search = StringVar()
        search_txt = ttk.Entry(search_frame, textvariable=self.var_search, width=18, font=("arial", 11, "bold"))
        search_txt.grid(row=0, column=2, sticky=W, padx=5)

        # Search Button ####################################################################################################

        btn_search = Button(search_frame, command=self.search_data, text="Search", font=("arial", 13, "bold"), width=14,
                            bg="blue", fg="white")
        btn_search.grid(row=0, column=3, sticky=W, padx=5)

        # All Button ####################################################################################################

        btn_all = Button(search_frame, command=self.fetch_data, text="Show All", font=("arial", 13, "bold"), width=14,
                         bg="blue", fg="white")
        btn_all.grid(row=0, column=4, padx=3, pady=5)

        crimeagency = Label(search_frame, font=("arial", 30, "bold"), text="PHILIPPINE CRIME AGENCY", bg="white",
                            fg='Crimson')
        crimeagency.grid(row=0, column=5, sticky=W, padx=80, pady=0)

        # Table Frame ##################################################################################################
        table_frame=Frame(down_frame, bd=2, relief=RIDGE)
        table_frame.place(x=0, y=60, width=1470, height=170)

       # Scroll BAR ####################################################################################################
        scroll_x = ttk.Scrollbar(table_frame, orient=HORIZONTAL)
        scroll_y = ttk.Scrollbar(table_frame, orient=VERTICAL)

        self.criminal_table = ttk.Treeview(table_frame, column=('1','2','3','4','5','6','7','8','9','10','11','12','13','14'),
                                         xscrollcommand=scroll_x.set, yscrollcommand=scroll_y.set)
        scroll_x.pack(side=BOTTOM, fill=X)
        scroll_y.pack(side=RIGHT, fill=Y)

        scroll_x.config(command=self.criminal_table.xview)
        scroll_y.config(command=self.criminal_table.yview)

        self.criminal_table.heading('1', text='CaseID')
        self.criminal_table.heading('2', text="Crime No")
        self.criminal_table.heading('3', text='Criminal Name')
        self.criminal_table.heading('4', text='NickName')
        self.criminal_table.heading('5', text='Arrest Date')
        self.criminal_table.heading('6', text='Crime of Date')
        self.criminal_table.heading('7', text='Address')
        self.criminal_table.heading('8', text='Age')
        self.criminal_table.heading('9', text='Occupation')
        self.criminal_table.heading('10', text='Birth Mark')
        self.criminal_table.heading('11', text='Crime Type')
        self.criminal_table.heading('12', text='Father Name')
        self.criminal_table.heading('13', text='Gender')
        self.criminal_table.heading('14', text='Wanted')

        self.criminal_table['show']='headings'

        self.criminal_table.column('1',width=100)
        self.criminal_table.column('2', width=100)
        self.criminal_table.column('3', width=100)
        self.criminal_table.column('4', width=100)
        self.criminal_table.column('5', width=100)
        self.criminal_table.column('6', width=100)
        self.criminal_table.column('7', width=100)
        self.criminal_table.column('8', width=100)
        self.criminal_table.column('9', width=100)
        self.criminal_table.column('10', width=100)
        self.criminal_table.column('11', width=100)
        self.criminal_table.column('12', width=100)
        self.criminal_table.column('13', width=100)
        self.criminal_table.column('14', width=100)


        self.criminal_table.pack(fill=BOTH, expand=1)

        self.criminal_table.bind("<ButtonRelease>",self.get_cursor)

        self.fetch_data()
    #AUTO INCREMENT==================================================================================================================

    def make_case_id_auto_increment(self):
        try:
            conn = mysql.connector.connect(host='localhost', username='root', password='', database='criminal')
            my_cursor = conn.cursor()

            # Alter the table to make Case_id auto-increment
            query = "ALTER TABLE criminal MODIFY COLUMN Case_id INT AUTO_INCREMENT"
            my_cursor.execute(query)

            conn.commit()
            conn.close()

        except Exception as es:
            messagebox.showerror('Error', f'Due To {str(es)}')

    # Add Function ##################################################################################################

    def add_data(self):
        if (
                self.var_arrest_date.get() == "" or
                self.var_date_of_crime.get() == "" or
                self.gender_var.get() == "" or
                self.wanted_var.get() == ""

        ):
            messagebox.showerror("Error", 'All Fields are required')
        else:
            try:
                # Convert the date strings to the correct format
                arrest_date = datetime.strptime(self.var_arrest_date.get(), '%d/%m/%y').strftime('%Y-%m-%d')
                date_of_crime = datetime.strptime(self.var_date_of_crime.get(), '%d/%m/%y').strftime('%Y-%m-%d')

                conn = mysql.connector.connect(host='localhost', username='root', password='', database='criminal')
                my_cursor = conn.cursor()
                my_cursor.execute(
                    "INSERT INTO criminal (criminal_no, Criminal_name, Nick_name, arrest_date, dateOfcrime, address, "
                    "age, occupation, BirthMark, crimetype, fatherName, gender, wanted) "
                    "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
                    (
                        self.var_criminal_no.get(),
                        self.var_name.get(),
                        self.var_nickname.get(),
                        arrest_date,  # Updated date format
                        date_of_crime,  # Updated date format
                        self.var_address.get(),
                        self.var_age.get(),
                        self.var_occupation.get(),
                        self.var_birthMark.get(),
                        self.var_crime_type.get(),
                        self.var_father_name.get(),
                        self.gender_var.get(),
                        self.wanted_var.get()

                    )
                )

                conn.commit()
                self.fetch_data()
                conn.close()
                messagebox.showinfo('Success', 'Criminal record has been added')
            except Exception as es:
                messagebox.showerror('Error', f'Due To {str(es)}')

            #Fetchdata###############################################################################################
    def fetch_data(self):
       conn=mysql.connector.connect(host='localhost',username='root', password='', database='criminal')
       my_cursor=conn.cursor()
       my_cursor.execute('select * from criminal')
       data=my_cursor.fetchall()
       if len(data)!=0:
           self.criminal_table.delete(*self.criminal_table.get_children())
           for i in data:
               self.criminal_table.insert("",END,values=i)
           conn.commit()
       conn.close()

    #get cursor ########################################################################################################

    def get_cursor(self, event=""):
        cursor_row = self.criminal_table.focus()
        content = self.criminal_table.item(cursor_row)
        data = content['values']

        self.var_case_id.set(data[0])
        self.var_criminal_no.set(data[1])
        self.var_name.set(data[2])
        self.var_nickname.set(data[3])

        # Format Arrest Date and Date of Crime
        if data[4]:
            arrest_date = datetime.strptime(data[4], '%Y-%m-%d').strftime('%d/%m/%Y')
            self.var_arrest_date.set(arrest_date)

        if data[5]:
            date_of_crime = datetime.strptime(data[5], '%Y-%m-%d').strftime('%d/%m/%Y')
            self.var_date_of_crime.set(date_of_crime)

        self.var_address.set(data[6])
        self.var_age.set(data[7])
        self.var_occupation.set(data[8])
        self.var_birthMark.set(data[9])
        self.var_crime_type.set(data[10])
        self.var_father_name.set(data[11])
        self.var_gender.set(data[12])
        self.var_wanted.set(data[13])

    def update_data(self):
        if self.var_case_id.get() == "":
            messagebox.showerror('Error', 'All Fields are required')
        else:
            try:
                update = messagebox.askyesno('Update', 'Are you sure to update this criminal record?')
                if update:
                    # Update the gender_var and wanted_var values based on selected radio buttons
                    self.gender_var.set(self.gender_var.get())
                    self.wanted_var.set(self.wanted_var.get())

                    conn = mysql.connector.connect(host='localhost', username='root', password='', database='criminal')
                    my_cursor = conn.cursor()

                    # Convert the date format before updating
                    arrest_date = datetime.strptime(self.var_arrest_date.get(), '%d/%m/%Y').strftime('%Y-%m-%d')
                    date_of_crime = datetime.strptime(self.var_date_of_crime.get(), '%d/%m/%Y').strftime('%Y-%m-%d')

                    my_cursor.execute(
                        'UPDATE criminal SET Criminal_no=%s, Criminal_name=%s, Nick_name=%s, '
                        'arrest_date=%s, dateOfcrime=%s, address=%s, age=%s, occupation=%s, BirthMark=%s, '
                        'crimeType=%s, fatherName=%s, gender=%s, wanted=%s WHERE Case_id=%s',
                        (
                            self.var_criminal_no.get(),
                            self.var_name.get(),
                            self.var_nickname.get(),
                            arrest_date,
                            date_of_crime,
                            self.var_address.get(),
                            self.var_age.get(),
                            self.var_occupation.get(),
                            self.var_birthMark.get(),
                            self.var_crime_type.get(),
                            self.var_father_name.get(),
                            self.gender_var.get(),
                            self.wanted_var.get(),
                            self.var_case_id.get()
                        ))

                    conn.commit()
                    self.fetch_data()
                    self.clear_data()
                    conn.close()
                    messagebox.showinfo('Success', 'Criminal record successfully updated')
            except Exception as es:
                messagebox.showerror('Error', f'Due to {str(es)}')


    # DELETE ###########################################################################################################
    def delete_data(self):
        if self.var_case_id.get()=="":
            messagebox.showerror('Error','All Fields are required')
        else:
            try:
                Delete = messagebox.askyesno('Update', 'Are you sure Update this criminal record?')
                if Delete:
                    conn=mysql.connector.connect(host='localhost', username='root', password='', database='criminal')
                    my_cursor=conn.cursor()
                    sql='delete from criminal where Case_id=%s'
                    value=(self.var_case_id.get(),)
                    my_cursor.execute(sql,value)
                else:
                    if not Delete:
                        return
                conn.commit()
                self.fetch_data()
                self.clear_data()
                conn.close()
                messagebox.showinfo('Success', 'Criminal record Successfully Deleted')
            except Exception as es:
                messagebox.showerror('Error', f'Due To {str(es)}')

    # CLEAR #####################################################################################################################
    def clear_data(self):
        self.var_case_id.set("")
        self.var_criminal_no.set("")
        self.var_name.set("")
        self.var_nickname.set("")
        self.var_arrest_date.set("")
        self.var_date_of_crime.set("")
        self.var_address.set("")
        self.var_age.set("")
        self.var_occupation.set("")
        self.var_birthMark.set("")
        self.var_crime_type.set("")
        self.var_father_name.set("")
        self.var_gender.set("")
        self.var_wanted.set("")


    #SEARCH ###################################################################################################################
    def search_data(self):
        if self.var_com_search.get()=="":
            messagebox.showerror('Error','All Fields are required')
        else:
            try:
                conn = mysql.connector.connect(host='localhost', username='root', password='', database='criminal')
                my_cursor = conn.cursor()
                my_cursor.execute('Select * from criminal where ' +str(self.var_com_search.get())+" LIKE'%"+str(self.var_search.get()+"%'"))
                rows=my_cursor.fetchall()
                if len(rows) != 0:

                    self.criminal_table.delete(*self.criminal_table.get_children())
                    for i in rows:
                        self.criminal_table.insert("", END, values=i)
                conn.commit()
                conn.close()
            except Exception as es:
                messagebox.showerror('Error', f'Due To {str(es)}')

    # Sorting ===============================================================================================
    def sort_data(self):
        selected_field = self.var_com_search.get()
        if not selected_field or selected_field == 'Select Option':
            messagebox.showerror('Error', 'Please select a field to sort by')
        else:
            try:
                conn = mysql.connector.connect(host='localhost', username='root', password='', database='criminal')
                my_cursor = conn.cursor()

                # Determine the sorting order
                sorting_order = "ASC"  # Default to ascending
                if hasattr(self, 'sorting_order') and self.sorting_order == "ASC":
                    sorting_order = "DESC"  # Switch to descending if already in ascending

                # Modify the SQL query to sort by the selected field and order
                if selected_field == 'Criminal_name':
                    query = f"SELECT * FROM criminal ORDER BY Criminal_name {sorting_order}"
                else:
                    query = f"SELECT * FROM criminal ORDER BY {selected_field} {sorting_order}"

                my_cursor.execute(query)
                rows = my_cursor.fetchall()

                if len(rows) != 0:
                    self.criminal_table.delete(*self.criminal_table.get_children())
                    for i in rows:
                        self.criminal_table.insert("", END, values=i)

                conn.commit()
                conn.close()

                # Update the sorting order for the next click
                self.sorting_order = sorting_order

            except Exception as es:
                messagebox.showerror('Error', f'Due To {str(es)}')



if __name__ == "__main__":
    root = Tk()
    obj = Criminal(root)
    root.mainloop()



